@charset "UTF-8";

//usage:
//@include breakpoint($s: 'small', $t: 'down') {
//}
//@include breakpoint($s: 'small', $t: 'up') {
//}
@mixin breakpoint(
  $s: 'small',
  $t: 'up'
) {
  $breakpoint_size: 0; // スコープ用
  $types: (
          up: 'min-width',
          down: 'max-width'
  );
  @if $t == 'up' {
    $breakpoint_size: map-get($breakpoints, $s) + 1px;
  } @else {
    $breakpoint_size: map-get($breakpoints, $s);
  }

  @media print, screen and (map-get($types, $t): #{$breakpoint_size}) {
    @content;
  }
}

@mixin gutter(
  $x: 0,
  $y: 0,
  $n: 1
) {
  $summed_x: #{$x * ($n - 1)};
  & > * {
    width: calc((100% - #{$summed_x}px) / #{$n});
    margin-left: #{$x}px;
    margin-top: #{$y}px;
    &:nth-child(-n+#{$n}) {
      margin-top: 0;
    }
    &:nth-child(#{$n}n+1) {
      margin-left: 0;
    }
  }
}

//usage:@include grid($x: 10, $y: 10, $n: 2, $flow: nowrap);
@mixin grid(
  $x: 0,
  $y: 0,
  $n: 1,
  $flow: wrap
) {
  @include gutter($x: $x, $y: $y, $n: $n);
  @if $flow == wrap {flex-flow: row wrap;}
  @if $flow == nowrap {flex-flow: row nowrap;}
  display: flex;
}

//url、メールが折り返さなくてレイアウトを崩れるのを防ぐ
@mixin no-wrap {
  word-break: break-all;
}

//usage:@include ratio($r: 0.5);
@mixin ratio(
  $r: 0.5
) {
  position: relative;
  &:after {
    content: "";
    display: block;
    padding-top: percentage($r);
  }
  & > * {
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
  }
}

@mixin breakpoint-pc() {
  @include breakpoint($s: 'small', $t: 'up') {
    @content;
  }
}

@mixin breakpoint-sp() {
  @include breakpoint($s: 'small', $t: 'down') {
    @content;
  }
}


@mixin container(
  $sp-margin: true
) {
  @include breakpoint-pc {
    margin-left: auto;
    margin-right: auto;
    width: $global-width;
  }
  @include breakpoint-sp {
    @if $sp-margin == true {
      margin-left: 15px;
      margin-right: 15px;
    }
  }
}
